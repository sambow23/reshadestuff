diff --git a/MartysMods_RTGI.fx b/MartysMods_RTGI.fx
index 34b76f0..9396fb5 100644
--- a/MartysMods_RTGI.fx
+++ b/MartysMods_RTGI.fx
@@ -136,6 +136,14 @@ uniform int RT_DEBUG_VIEW <
 	ui_tooltip = "Different debug outputs";
     ui_category = "Debug";
 > = 0;
+
+uniform float RT_DIFFUSE_SATURATION <
+    ui_type = "drag";
+    ui_min = 0.0; ui_max = 2.0;
+    ui_step = 0.01;
+    ui_label = "Diffuse Bounce Saturation";
+    ui_category = "Blending";
+> = 1.0;
 /*
 uniform float4 tempF1 <
     ui_type = "drag";
@@ -371,6 +379,13 @@ float3 ycocg_to_linear(float3 color)
     return max(r, 0.0);
 }
 
+// saturation control (not by marty)
+float3 adjust_saturation(float3 color, float saturation)
+{
+    float grey = dot(color, float3(0.2126, 0.7152, 0.0722));
+    return lerp(grey.xxx, color, saturation);
+}
+
 //Co Cg Y Y^2
 float4 encode_hdr_to_filter(float3 color)
 {
@@ -936,8 +951,9 @@ void TraceWrapDiffusePS(in VSOUT i, out float4 o : SV_Target0)
                         float3 hit_n = Deferred::get_normals(tap_uv.zw);
                         float facing = saturate(dot(-hit_n, deltavec) * rsqrt(ddotd)); //horizon math does not include cosine term for emitter
                         float4 albedofetch = tex2Dlod(sRadianceTex, tap_uv.zw, 0);
-                        float3 albedo = albedofetch.rgb * albedofetch.a * facing; //mask out sky                         
-                        rtgi.rgb += albedo * hit;
+                        float3 albedo = albedofetch.rgb * albedofetch.a * facing; //mask out sky
+                        float3 saturated_albedo = adjust_saturation(albedo, RT_DIFFUSE_SATURATION);
+                        rtgi.rgb += saturated_albedo * hit;
                     }                    
                 }               
                 occlusion_bitfield = local_bitfield;
@@ -949,6 +965,7 @@ void TraceWrapDiffusePS(in VSOUT i, out float4 o : SV_Target0)
     }
 
     rtgi /= slicesum;
+    rtgi.rgb = adjust_saturation(rtgi.rgb, RT_DIFFUSE_SATURATION);
 #if _COMPUTE_SUPPORTED
     tex2Dstore(stRTGI_Aux0, uint2(orig_pos.x, orig_pos.y), float4(convert_gi_to_lighting(rtgi,  false), _this.depth));
 #else 
@@ -1279,6 +1296,9 @@ void BlendPS(in VSOUT i, out float3 o : SV_Target0)
     diff = lerp(1, diff, fade);
     spec = lerp(0, spec, fade);
 
+    // Apply saturation adjustment to diffuse component
+    diff = adjust_saturation(diff, RT_DIFFUSE_SATURATION);
+
     o = tex2D(ColorInput, i.uv).rgb;
     if(RT_DEBUG_VIEW == 2 && i.uv.x < 0.35 + (i.uv.y - 0.5) * -0.15) return;
     if((RT_DEBUG_VIEW && i.uv.x < (1-0.35) + (i.uv.y - 0.5) * -0.15) || RT_DEBUG_VIEW == 1) o = 0.444;
